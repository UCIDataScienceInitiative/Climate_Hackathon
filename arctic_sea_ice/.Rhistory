plot(x,y)
min(y)
tail(y)
R.version
update.packages()
library(ggplot2)
library(gridExtra)
library(xtable)
version
packageStatus()
update.packages(checkBuilt=TRUE)
packageStatus()
dotR <- file.path(Sys.getenv("HOME"), ".R")
if (!file.exists(dotR)) dir.create(dotR)
M <- file.path(dotR, "Makevars")
if (!file.exists(M)) file.create(M)
cat("\nCXXFLAGS=-O3 -mtune=native -march=native -Wno-unused-variable -Wno-unused-function",
file = M, sep = "\n", append = TRUE)
system('clang++ -v')
cat("\nCC=clang", "CXX=clang++ -arch x86_64 -ftemplate-depth-256",
file = M, sep = "\n", append = TRUE)
system('g++ -v')
cat('Sys.setenv(BINPREF = "C:/Rtools/mingw_$(WIN)/bin/")',
file = file.path(Sys.getenv("HOME"), ".Rprofile"),
sep = "\n", append = TRUE)
cat("\nCXXFLAGS += -Wno-ignored-attributes -Wno-deprecated-declarations",
file = M, sep = "\n", append = TRUE)
cat(readLines(M), sep = "\n")
install.packages('rstan', repos = 'https://cloud.r-project.org/', dependencies=TRUE)
install.packages(c("acepack", "arm", "car", "cluster", "codetools", "colorspace", "curl", "digest", "DT", "dygraphs", "effects", "evaluate", "fasttime", "foreign", "gss", "HiddenMarkov", "Hmisc", "htmlwidgets", "influence.ME", "jsonlite", "knitr", "lattice", "lsmeans", "Matrix", "matrixStats", "MCMCpack", "metaSEM", "mgcv", "OpenMx", "openssl", "packrat", "pbapply", "permute", "proto", "quantreg", "R6", "RandomFields", "RandomFieldsUtils", "Rcmdr", "RcmdrMisc", "Rcpp", "RcppArmadillo", "RcppEigen", "reshape2", "rgl", "rmarkdown", "rsconnect", "rstan", "sem", "shiny", "shinyjs", "shinystan", "shinythemes", "SparseM", "splancs", "stabledist", "StanHeaders", "stringi", "stringr", "survival", "vcd"))
install.packages(c("acepack", "arm", "car", "cluster", "codetools",
install.packages(c("acepack", "arm", "car", "cluster", "codetools", "colorspace", "curl", "digest", "DT", "dygraphs", "effects", "evaluate", "fasttime", "foreign", "gss", "HiddenMarkov", "Hmisc", "htmlwidgets", "influence.ME", "jsonlite", "knitr", "lattice", "lsmeans", "Matrix", "matrixStats", "MCMCpack", "metaSEM", "mgcv", "OpenMx", "openssl", "packrat", "pbapply", "permute", "proto", "quantreg", "R6", "RandomFields", "RandomFieldsUtils", "Rcmdr", "RcmdrMisc", "Rcpp", "RcppArmadillo", "RcppEigen", "reshape2", "rgl", "rmarkdown", "rsconnect", "rstan", "sem", "shiny", "shinyjs", "shinystan", "shinythemes", "SparseM", "splancs", "stabledist", "StanHeaders", "stringi", "stringr", "survival", "vcd"))
install.packages(c("acepack", "arm", "car", "cluster", "codetools",
"colorspace", "curl", "digest", "DT", "dygraphs", "effects", "evaluate", "fasttime", "foreign", "gss", "HiddenMarkov", "Hmisc", "htmlwidgets", "influence.ME", "jsonlite", "knitr", "lattice", "lsmeans", "Matrix", "matrixStats", "MCMCpack", "metaSEM", "mgcv", "OpenMx", "openssl", "packrat", "pbapply", "permute", "proto", "quantreg", "R6", "RandomFields", "RandomFieldsUtils", "Rcmdr", "RcmdrMisc", "Rcpp", "RcppArmadillo", "RcppEigen", "reshape2", "rgl", "rmarkdown", "rsconnect", "rstan", "sem", "shiny", "shinyjs", "shinystan", "shinythemes", "SparseM", "splancs", "stabledist", "StanHeaders", "stringi", "stringr", "survival", "vcd"))
install.packages(c("acepack", "arm", "car", "cluster", "codetools",
install.packages("acepack")
install.packages("arm")
install.packages(c("car", "cluster", "codetools", "colorspace", "curl"))
install.packages(c("digest", "DT", "dygraphs", "effects", "evaluate", "fasttime", "foreign", "gss"))
install.packages(c("Hmisc", "htmlwidgets", "influence.ME", "jsonlite", "knitr", "lattice", "lsmeans", "Matrix"))
install.packages("HiddenMarkov")
install.packages(c("matrixStats", "MCMCpack", "metaSEM", "mgcv", "OpenMx"))
install.packages(c("openssl", "packrat", "pbapply", "permute", "proto", "quantreg", "R6"))
install.packages(c("RandomFields", "RandomFieldsUtils", "Rcmdr", "RcmdrMisc", "Rcpp", "RcppArmadillo", "RcppEigen"))
install.packages(c("reshape2", "rgl", "rmarkdown", "rsconnect", "rstan", "sem", "shiny"))
version
library(NHMM)
sessionInfo()
install.packages("switchr")
library(switchr)
sessionInfo()
?qexp
alpha <- 0.05
q <- c(alpha/2, 1-alpha/2)
q
qexp(q, rate=1)
l <- qexp(q, rate=1)[1]
u <- qexp(q, rate=1)[2]
l
u
n <- 100
T_n <- 2.17
lower <- (n*T_n) / (n-l)
upper <- (n*T_N) / (n-u)
upper <- (n*T_n) / (n-u)
c(lower, upper)
paste("95% confidence interal for theta: (", lower, ", ", upper, ")", sep="")
paste("95% confidence interal for theta: (", round(lower,3), ", ", round(upper,3), ")", sep="")
?qexp
alpha <- 0.05  # prob of Type I error
p <- c(alpha/2, 1-alpha/2)  # we want quantiles associated with these probabilities
l <- qexp(p, rate=1)[1]  # lower quantile
u <- qexp(p, rate=1)[2]  # upper quantile
### PART C - do the calculation for alpha=0.05 or a 95% conf int
n <- 100  # sample size
T_n <- 2.17  # observed maximum value
lower <- (n*T_n) / (n-l)  #
upper <- (n*T_n) / (n-u)
paste("95% confidence interal for theta: (", round(lower,3), ", ", round(upper,3), ")", sep="")
set.seed(12345)
n<-25
J<-10
id<-rep(1:n,each=J)
t.ij<-rep(runif(n,1,10),each=J)
X<-cbind(1,t.ij)
tau2<-5
sigma2<-10
nsim<-10000
beta0<-120
beta1<-0
beta<-rbind(beta0,beta1)
tau2<-0
mu<-X%*%beta
mu
b1Low<-vector(length = n*J)
b1Up<-vector(length = n*J)
betahat<-vector(length = n*J)
model.se<-vector(length = n*J)
probs<-vector(length = n*J)
X
beta
i <- 1
eps<-rep(rnorm(n,0,sigma2),each=J)
eps
eps<-rep(rnorm(n,0,sqrt(sigma2)),each=J)
boi<-rep(rnorm(n,0,sqrt(tau2)),each=J)
eps
boi
Y<-mu+eps+boi
y
Y
eps<-rep(rnorm(n*J,0,sqrt(sigma2)))
boi<-rep(rnorm(n*J,0,sqrt(tau2)))
Y<-mu+eps+boi
Y
fit<-lm(Y~t.ij)
fit
betahat[i]<-coef[2,1]
model.se[i]<-coef[2,2]
coef<-summary(fit)$coefficients
betahat[i]<-coef[2,1]
model.se[i]<-coef[2,2]
betahat
model.se
summary(fit)$coefficients
b1Low[i] <- coef[2,1] - ( qt( 0.975, n*J-2 ) * coef[2,2] )
b1Up[i] <- coef[2,1] + ( qt( 0.975, n*J-2 ) * coef[2,2] )
b1Low[i]
b1Up[i]
sum(0 %in% c(b1Low[i], b1Up[i]))
0 %in% c(b1Low[i], b1Up[i])
c(b1Low[i], b1Up[i])
qnorm( 0.975 )
coef[2,1] -  qnorm(0.975) * model.se[i] / sqrt(n*J)
coef[2,1] +  qnorm(0.975) * model.se[i] / sqrt(n*J)
eps<-rep(rnorm(n*J,0,sqrt(sigma2)))
boi<-rep(rnorm(n*J,0,sqrt(tau2)))
Y<-mu+eps+boi
fit<-lm(Y~t.ij)
coef<-summary(fit)$coefficients
betahat[i]<-coef[2,1]
model.se[i]<-coef[2,2]
b1Low[i] <- coef[2,1] -  qnorm(0.975) * model.se[i] / sqrt(n*J)
b1Up[i] <- coef[2,1] +  qnorm(0.975) * model.se[i] / sqrt(n*J)
c(b1Low[i], b1Up[i])
qnorm(0.975)
coef[2,1]
summary(fit)$coefficients
set.seed(12345)
n<-25
J<-10
id<-rep(1:n,each=J)
t.ij<-rep(runif(n,1,10),each=J)
X<-cbind(1,t.ij)
tau2<-5
sigma2<-10
############################
##
##Simulation
##
##
nsim<-10000
beta0<-120
beta1<-0
beta<-rbind(beta0,beta1)
tau2<-0
mu<-X%*%beta
b1Low<-vector(length = n*J)
b1Up<-vector(length = n*J)
betahat<-vector(length = n*J)
model.se<-vector(length = n*J)
probs<-vector(length = n*J)
for(i in 1:nsim){
eps<-rep(rnorm(n*J,0,sqrt(sigma2)))
boi<-rep(rnorm(n*J,0,sqrt(tau2)))
Y<-mu+eps+boi
fit<-lm(Y~t.ij)
coef<-summary(fit)$coefficients
betahat[i]<-coef[2,1]
model.se[i]<-coef[2,2]
b1Low[i] <- betahat[i] -  qnorm(0.975) * model.se[i] / sqrt(n*J)
b1Up[i] <- betahat[i] +  qnorm(0.975) * model.se[i] / sqrt(n*J)
c(b1Low[i], b1Up[i])
probs[i]<-coef[2,4]
}
mean(betahat)      #For E(beta hat)
mean(model.se^2)   #For mean(var hat(beta hat))
var(betahat)    #For observed var(beta hat)
b1Cover <- sum( 0 < b1Up & 0 > b1Low ) / nsim     #For coverage probability
type1error <- sum(probs < 0.05)/nsim  #For type 1 error rate
type1error
b1Cover
var(betahat)
mean(model.se^2)
mean(betahat)
cbind(b1Low, b1Up)
fit
summary(fit)$coefficients
type1error
tail(cbind(b1Low, b1Up))
b1Cover
mean(model.se^2)
var(betahat)    #For observed var(beta hat)
mean(betahat)      #For E(beta hat)
dbinom(5,10,0.5)
dbinom(5,10,0.5)
dbinom(5,10,0.5)
dbinom(5,10,0.5)
dbinom(5,10,0.5)
dbinom(5,10,0.5)
Samp1 <- rnorm(300, mean = 2.5, sd = 1)
Samp2 <- rnorm(500, mean = 3.0, sd = 1)
hist(Samp1, main = "Density of Samp1", freq = F, col = "grey")
abline(v = mean(Samp1), col = "red", lwd = 2)
lines(density(Samp1))
hist(Samp2, freq = F, add = T)
abline(v = mean(Samp2), col = "blue", lwd = 2)
lines(density(Samp2), col="blue")
?lines
?lowess
dim(Samp1)
dim(c(Samp1,Samp2))
dim(data.frame(Samp1,Samp2))
dim(data.frame(Samp1,Samp2[1:300]))
knitr::opts_chunk$set(echo = FALSE)
library(car)
library(car)
data(Prestige) # load the data
str(Prestige)
which(is.na(Prestige$type))  # gives index numbers of the NAs in the vector
rownames(Prestige)[which(is.na(Prestige$type))]  # find the row names at those indexes
Prestige[is.na(Prestige$type),]
ind <- which(is.na(Prestige$type))  # gives index numbers of the NAs in the vector
rownames(Prestige)[ind]  # same as above operation
ind.ch <- ind[-1]
Prestige[ind.ch,"type"] <- rep("bc", 3)
summary(Prestige$type)
rbind(ind, name=rownames(Prestige)[ind])  # print index with rowname
ind.ch
table(Prestige$type)
?lm
?abline
knitr::opts_chunk$set(echo = FALSE)
table(Mroz$lfp, Mroz$k5)
as.vector(head(predict(fitLogistic),1))
fitLogistic <- glm(lfp ~ k5 + age, family=binomial(logit), data=Mroz)
fitLogistic
as.vector(head(predict(fitLogistic),1))
?dbinom
dbinom(5, 10, 0.5)
dbinom(5, 20, 0.5)
pbinom(5, 10, 0.5)
qbinom(0.75, 10, 0.5)
rbinom(20, 10, 0.5)
?dnorm
dnorm(x=0, mean=0, sd=1)
dnorm(x=0, mean=5, sd=1)
dnorm(x=0, mean=0, sd=2)
pnorm(0, 0, 1)
pnorm(0, 0, 1, lower.tail=FALSE)
qnorm(0.975, mean=0, sd=1)
rnorm(10, mean=0, sd=1)
rnorm(10, mean=100, sd=1)
?seq
seq(from=0,to=1,by=0.5)
x<-seq(from=-3, to=3, by=0.05)
y<-dnorm(x,mean=0,sd=1)
plot(x=x, y=y)
plot(x=x, y=y, type="l")
plot(x=x, y=y, type="l", main="Std Normal Density")
plot(x=x, y=y, type="l", main="Std Normal Density", xlab="X", ylab="Density")
?plot
plot(x=x, y=y, type="l", main="Std Normal Density", xlab="X", ylab="Density", col="red")
plot(x=x, y=y, type="p", main="Std Normal Density", xlab="X", ylab="Density", col="red")
plot(x=x, y=y, type="p", main="Std Normal Density", xlab="X", ylab="Density", col="red", pch=1)
plot(x=x, y=y, type="p", main="Std Normal Density", xlab="X", ylab="Density", col="red", pch=2)
plot(x=x, y=y, type="p", main="Std Normal Density", xlab="X", ylab="Density", col="red", pch=17)
plot(x=x, y=y, type="o", main="Std Normal Density", xlab="X", ylab="Density", col="red", pch=17)
?set.seed
set.seed(123)
rnorm(1)
rnorm(1)
set.seed(123)
rnorm(1)
rnorm(1)
set.seed(123)
oneSampData <- rnorm(100, 0, 1)
mean(oneSampData)
sd(oneSampData)
oneSampTest.0 <- t.test(oneSampData)
oneSampTest.0
?t.test
names(oneSampTest.0)
oneSampTest.0$statistic
oneSampTest.0$conf.int
oneSampTest.0$p.value
attr(oneSampTest.0, "conf.level")
attr(oneSampTest.0$conf.int, "conf.level"
)
names(oneSampTest.0$conf.int)
attr(oneSampTest.0$conf.int)
oneSampTest.mu <- t.test(oneSampData, mu=0.3)
oneSampTest.mu
Samp1 <- rnorm(300, mean = 2.5, sd = 1)
Samp2 <- rnorm(500, mean = 3.0, sd = 1)
t.test(Samp1, Samp2)
t.test(Samp1, Samp2, var.equal = TRUE)
t.test(Samp1, Samp2[1:300], paired=TRUE)
?c
c(1,2,3)
plot(x,y)
plot(x,y)
summary(Samp1)
?hist
hist(Samp1)
hist(Samp1, freq=TRUE)
hist(Samp1, freq=FALSE)
hist(Sampe1, freq=F, main="Density of Samp1")
hist(Samp1, freq=F, main="Density of Samp1")
hist(Samp1, freq=F, main="Density of Samp1", col="red")
hist(Samp1, freq=F, main="Density of Samp1", col="grey")
?abline
abline(v=mean(Samp1), col="red")
abline(v=mean(Samp1), col="red", lwd=2)
abline(v=mean(Samp1), col="red", lwd=10)
hist(Samp1, freq=F, main="Density of Samp1", col="grey")
abline(v=mean(Samp1), col="red", lwd=10)
hist(Samp1, freq=F, main="Density of Samp1", col="grey")
abline(v=mean(Samp1), col="red", lwd=10)
abline(v=mean(Samp1), col="red", lwd=2)
hist(Samp1, freq=F, main="Density of Samp1", col="grey")
abline(v=mean(Samp1), col="red", lwd=2)
abline(h=0.2, lty=2, col="blue")
hist(Samp1, freq=F, main="Density of Samp1", col="grey")
abline(v=mean(Samp1), col="red", lwd=2)
hist(Samp2, freq=F)
hist(Samp1, freq=F, main="Density of Samp1", col="grey")
abline(v=mean(Samp1), col="red", lwd=2)
hist(Samp2, freq=F, add=TRUE)
abline(v=mean(Samp2), col="blue")
?legend
legend("topright", legend=c("Sample 1","Sample 2"), fill=c("grey","white"))
hist(Samp1, freq=F, main="Density of Samp1", col="grey")
abline(v=mean(Samp1), col="red", lwd=2)
hist(Samp2, freq=F, add=TRUE)
abline(v=mean(Samp2), col="blue")
legend("topright", legend=c("Sample 1","Sample 2"), fill=c("grey","white"), bty="n")
hist(Samp1, main = "Densities of Samp1 and Samp2", freq = F, col = "grey", xlab="")
abline(v = mean(Samp1), col = "red", lwd = 2)
hist(Samp2, freq = F, add = T)
abline(v = mean(Samp2), col = "blue", lwd = 2)
legend("topright", legend = c("Samp1", "Samp2"),
fill = c("grey","white"), bty = "n", cex = 2)
?hist
hist(Samp1, main = "Densities of Samp1 and Samp2", freq = F, col = "grey", xlab="", xlim=c(-100,100))
abline(v = mean(Samp1), col = "red", lwd = 2)
hist(Samp2, freq = F, add = T)
abline(v = mean(Samp2), col = "blue", lwd = 2)
legend("topright", legend = c("Samp1", "Samp2"),
fill = c("grey","white"), bty = "n", cex = 2)
hist(Samp1, main = "Densities of Samp1 and Samp2", freq = F, col = "grey", xlab="", xlim=c(0,15))
abline(v = mean(Samp1), col = "red", lwd = 2)
hist(Samp2, freq = F, add = T)
abline(v = mean(Samp2), col = "blue", lwd = 2)
legend("topright", legend = c("Samp1", "Samp2"),
fill = c("grey","white"), bty = "n", cex = 1)
?density
plot(density(Samp1), col="red", main="Densities of Samp1 & Samp2", xlab="")
abline(v=mean(Samp1), col="red", lty=2)
?lines
lines(density(Samp2), col="blue")
abline(v=mean(Samp2), col="blue", lty=2)
legend("topright", legend = c("Samp1", "Samp2"),
fill = c("red","blue"), bty = "n", cex = 1.3)
install.packages("car")
library(car)
?source
data(Prestige)
str(Prestige)
summary(Prestige)
Prestige[is.na(Prestige$type),]
is.na(Prestige$type)
ind <- which(is.na(Prestige$type))
ind
Prestige[ind,]
rbind(ind=ind, name=rowname(Prestige(ind)))
rbind(ind=ind, name=rownames(Prestige(ind)))
rbind(ind=ind, name=rownames(Prestige[ind,])
rownames(Prestige)
rownames(Prestige)[ind]
rbind(ind, names=rownames(Prestige)[ind])
ind.ch <- ind[-1]
ind.chd
ind.ch
Prestige[ind.ch, "type"] <- rep("bc",3)
rep("bc",3)
summary(Prestige$type)
Prestige <- na.omit(Prestige)
summary(Prestige$type)
ind[1]
ind
ind[1]
ind[-11]
ind[-1]
ind[-2]
ind[-1:-2]
levels(Prestige$prestige)
summary(Prestige)
View(Prestige)
View(Prestige)
plot(Prestige$education, Prestige$prestige, main = "Prestige Score by Education",
xlab = "Ave. Years of Education", ylab = "Prestige Score")
plot(Prestige$education, Prestige$prestige, main = "Prestige Score by Education")
plot(Prestige$education, Prestige$prestige, main = "Prestige Score by Education",
xlab = "Ave. Years of Education", ylab = "Prestige Score")
abline(reg=lm(prestige ~ education, data=Prestige), col="red", lwd=2)
lines(lowess(Prestige$education, Prestige$prestige), col = "blue", lty = 2, lwd = 2)
?lowess
legend("topleft",legend = c("Regression Line", "Smoother"), col = c("red","blue"),
lwd = c(2,2), lty = c(1,2), bty = "n")
scatterplotMatrix(Prestige[,c("prestige","education","income","women")])
boxplot(Prestige$prestige)
summary(Prestige$prestige)
myReg <- lm(prestige ~ education + income + women, data=Prestige)
myReg
names(myReg)
summary(myReg)
confint(myReg, level=0.95)
mod <- update(myReg, ~ . + type)
summary(mod)
levels(Prestige$type)
Prestige$type <- relevel(Prestige$type, "prof")
levels(Prestige$type)
mod <- update(myReg, ~ . + type)
summary(mod)
par(mfrow = c(2, 2), oma = c(0, 0, 2, 0))
plot(myReg)
par(mfrow = c(2, 2), oma = c(0, 0, 2, 0))
plot(myReg)
plot(myReg)
plot(myReg)
newData = data.frame(education=13.2, income=12000, women=12)
predict(myReg, newData, interval="predict")
plot(myReg)
plot(x,y)
library(car)
data("Mroz")
data(Mroz)
str(Mroz)
?Prestige
summary(Mroz)
?Mroz
?table
summary(Mroz$lfp)
table(Mroz$lfp)
table(Mroz$lfp, Mroz$k5)
plot(Mroz$age, Mroz$lwg, col = ifelse(Mroz$lfp == "yes", "red", "blue"),
main = "Age vs. Log Wage by LFP", xlab = "Age (Years)", ylab = "Wage")
legend(x = 50, y = -1.5, legend = c("in LF", "Out of LF"),
fill = c("red", "blue"), bty = "n")
fitLogistic <- glm(lfp ~ k5 + age, data=Mroz, family = binomial(logit))
fitLogistic
summary(fitLogistic)
names(fitLogistic)
fitLogistic$coefficients
exp(fitLogistic$coefficients)
confint(fitLogistic, level=0.95)
exp(confint(fitLogistic, level=0.95))
newData <- data.frame(k5=1, age=40)
predict(fitLogistic, newData)
XB <- predict(fitLogistic, newData)
XB
predict(fitLogistic, newData, type="response")
p <- predict(fitLogistic, newData, type="response")
exp(XB)/(1+exp(XB))
fitLogistic2 <- update(fitLogistic, ~ . + inc + lwg, data=Mroz)
summary(fitLogistic2)
anova(fitLogistic, fitLogistic2, test="LRT")
anova(fitLogistic2, fitLogistic, test="LRT")
library(xtable)
library(ggplot2)
library(gridExtra)
library(MASS)
library(RColorBrewer)
setwd("/Users/CMG/Documents/DataLab/NIST/DFRWS_2017/")
default.par <- par()
set.seed(1234)
source("./markedPP_funcs.R")
dat <- readRDS(file="./data/deidentified_data.rds")
setwd("/Users/CMG/Documents/DataLab/NIST/DFRWS_2017/")
getwd()
setwd("/Users/CMG/Documents/DataLab/NIST/DFRWS_2017/")
install.packages("netcdf")
install.packages("ncdf4")
library(ncdf4)
setwd("/Users/CMG/Documents/DSI/Climate_Hackathon/arctic_sea_ice")
seaice <- nc_open("G10010_SIBT1850_v1.1.nc")
print(seaice)
lon <- ncvar_get(seaice,"longitude")
nlon <- dim(lon)
lat <- ncvar_get(seaice,"latitude")
nlat <- dim(lat)
t <- ncvar_get(seaice,"time")
nt <- dim(t)
tunits <- ncatt_get(seaice,"time","units")
tunits
sec.mult <- 60*60*24
ts <- as.POSIXct(t*sec.mult, origin="2001-01-01 00:00:00", tz="UTC")
head(ts)
tail(ts)
conc <- ncvar_get(seaice,"seaice_conc")
head(conc)
